{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pywedge documentation What is Pywedge? Pywedge is a pip installable Python package that intends to, Make multiple charts in a single line of code, to enable the user to quickly read through the charts and can make informed choices in pre-processing steps Quickly preprocess the data by taking the user\u2019s preferred choice of pre-processing techniques & it returns the cleaned datasets to the user in the first step. Make a baseline model summary, which can return ten various baseline models, which can point the user to explore the best performing baseline model. Pywedge intends to help the user by quickly making charts, preprocessing the data and to rightly point out the best performing baseline model for the given dataset so that the user can spend quality time tuning such a model algorithm. Installation pip install pywedge For JupyterLab, please run the following commands in anaconda prompt to enable required JupyterLab extensions to display interactive chart widget, conda install -c conda-forge nodejs jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter labextension install jupyterlab-plotly@4.14.1 jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget@4.14.1 Mlflow is not a hard requirement in Pywedge, this is mainly to keep the pywedge light weight for the benefit of trying pywedge in web apps like Heroku. So mlflow has to be separately installed to track the hyperparameters, pip install mlflow Please note: Pywedge is available only in Jupyter Notebook & JupyterLab environments Pywedge Features Cleans the raw data frame to fed into ML models. Following data pre_processing will be carried out, Makes 8 different types of interactive charts with interactive axis selection widgets Interactive pre-processing & 10 different baseline models Missing values imputation for numeric & categorical columns Standardization Feature importance Class oversampling using SMOTE Computes 10 different baseline models Interactive Hyperparameter tuning & tracking hyperparameters using integreted MLFlow Classification / Regression Hyperparameters tuning Available baseline estimators for interactive hyperparameter tuning as of now, more baseline estimators will be added soon for interactive hyperparameter tunings Logistic / Linear Regression Decision Tree Classifier / Regressor Random Forest Classifier/ Regressor KNN Classifier / Regressor","title":"Home"},{"location":"#welcome-to-pywedge-documentation","text":"","title":"Welcome to Pywedge documentation"},{"location":"#what-is-pywedge","text":"Pywedge is a pip installable Python package that intends to, Make multiple charts in a single line of code, to enable the user to quickly read through the charts and can make informed choices in pre-processing steps Quickly preprocess the data by taking the user\u2019s preferred choice of pre-processing techniques & it returns the cleaned datasets to the user in the first step. Make a baseline model summary, which can return ten various baseline models, which can point the user to explore the best performing baseline model. Pywedge intends to help the user by quickly making charts, preprocessing the data and to rightly point out the best performing baseline model for the given dataset so that the user can spend quality time tuning such a model algorithm.","title":"What is Pywedge?"},{"location":"#installation","text":"pip install pywedge For JupyterLab, please run the following commands in anaconda prompt to enable required JupyterLab extensions to display interactive chart widget, conda install -c conda-forge nodejs jupyter labextension install @jupyter-widgets/jupyterlab-manager jupyter labextension install jupyterlab-plotly@4.14.1 jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget@4.14.1 Mlflow is not a hard requirement in Pywedge, this is mainly to keep the pywedge light weight for the benefit of trying pywedge in web apps like Heroku. So mlflow has to be separately installed to track the hyperparameters, pip install mlflow Please note: Pywedge is available only in Jupyter Notebook & JupyterLab environments","title":"Installation"},{"location":"#pywedge-features","text":"Cleans the raw data frame to fed into ML models. Following data pre_processing will be carried out, Makes 8 different types of interactive charts with interactive axis selection widgets Interactive pre-processing & 10 different baseline models Missing values imputation for numeric & categorical columns Standardization Feature importance Class oversampling using SMOTE Computes 10 different baseline models Interactive Hyperparameter tuning & tracking hyperparameters using integreted MLFlow Classification / Regression Hyperparameters tuning Available baseline estimators for interactive hyperparameter tuning as of now, more baseline estimators will be added soon for interactive hyperparameter tunings Logistic / Linear Regression Decision Tree Classifier / Regressor Random Forest Classifier/ Regressor KNN Classifier / Regressor","title":"Pywedge Features"},{"location":"examples/","text":"Pywedge Examples Web-apps Pywedge-Make_Charts Heroku Web App - Demo Binder Notebooks Pywedge-Make_Charts Binder Notebook","title":"Examples"},{"location":"examples/#pywedge-examples","text":"","title":"Pywedge Examples"},{"location":"examples/#web-apps","text":"","title":"Web-apps"},{"location":"examples/#pywedge-make_charts-heroku-web-app-demo","text":"","title":"Pywedge-Make_Charts Heroku Web App - Demo"},{"location":"examples/#binder-notebooks","text":"","title":"Binder Notebooks"},{"location":"examples/#pywedge-make_charts-binder-notebook","text":"","title":"Pywedge-Make_Charts Binder Notebook"},{"location":"license/","text":"MIT License Copyright (c) 2020-2021 Venkatesh Rengarajan Muthu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"modules/","text":"Pywedge Modules Make_Charts Makes 8 different types of interactive Charts with interactive axis selection widgets in a single line of code for the given dataset. Different types of Charts viz, Scatter Plot Pie Chart Bar Plot Violin Plot Box Plot Distribution Plot Histogram Correlation Plot Arguments: Dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string Returns: Charts widget Pywedge-Make_Charts Demo YouTube link below, Please read about Pywedge-Make_Charts module in this article published in Analytics India Magazine . Baseline_model The baseline_model class starts with interactive pre-processing steps, Instantiate the baseline class & call the classification_summary method from baseline_model class, blm = pw.baseline_model(train, test, c, y, type) blm.classification_summary() Args: train = train dataframe test = test dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string type = Classification(Default) / Regression For classification - classification_summary() For Regression - Regression_summary() User Inputs in Interactive Tab: Categorical columns conversion options Using Pandas Catcodes Using Pandas Get Dummies Standardization Options, Standard scalar Minmax scalar Robust Scalar No Standardization For Classification, Class balance using SMOTE options Yes No Test Size for Train-test split test size in float Returns: Baseline models tab - Various baseline model metrics Predict Baseline model tab - User can select the preferred available baseline choices to predict Pywedge_Interactive Hyperparameter Tuning Introducing interactive hyperparameter tuning classes, Pywedge_HP, which has following two methods, HP_Tune_Classification HP_Tune_Regression Instantiate the Pywedge_HP class & call the HP_Tune_Classification method from Pywedge_HP class, pph = pw.Pywedge_HP(train, test, c, y, tracking=False) pph.HP_Tune_Classification() Args: train = train dataframe test = test dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string tracking = True/False(Default) #to enable mlflow hyperpameter tracking For classification - HP_Tune_Classification() For Regression - HP_Tune_Regression() As seen in the above GIF, user can interactively enter hyperparameter values, without worrying about tracking the same, as the integreted MLFlow automatically takes care of tracking hyperparameter values. To invoke mlflow tracking user interface, follow the below steps, 1) open command prompt 2) change directory to the location of the Jupyter Notebook file, for eg., if Jupyter notebook in a folder named pywedge in Documents folder, cd documents\\pywedge 3) enter the following command from the same folder as of the Jupyter Notebook file, mlflow ui 4) which trigers the mlflow ui & typically mlflow starts in the local host 5000. Please find the below pic for reference,","title":"Modules"},{"location":"modules/#pywedge-modules","text":"","title":"Pywedge Modules"},{"location":"modules/#make_charts","text":"Makes 8 different types of interactive Charts with interactive axis selection widgets in a single line of code for the given dataset. Different types of Charts viz, Scatter Plot Pie Chart Bar Plot Violin Plot Box Plot Distribution Plot Histogram Correlation Plot Arguments: Dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string Returns: Charts widget Pywedge-Make_Charts Demo YouTube link below, Please read about Pywedge-Make_Charts module in this article published in Analytics India Magazine .","title":"Make_Charts"},{"location":"modules/#baseline_model","text":"The baseline_model class starts with interactive pre-processing steps, Instantiate the baseline class & call the classification_summary method from baseline_model class, blm = pw.baseline_model(train, test, c, y, type) blm.classification_summary() Args: train = train dataframe test = test dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string type = Classification(Default) / Regression For classification - classification_summary() For Regression - Regression_summary() User Inputs in Interactive Tab: Categorical columns conversion options Using Pandas Catcodes Using Pandas Get Dummies Standardization Options, Standard scalar Minmax scalar Robust Scalar No Standardization For Classification, Class balance using SMOTE options Yes No Test Size for Train-test split test size in float Returns: Baseline models tab - Various baseline model metrics Predict Baseline model tab - User can select the preferred available baseline choices to predict","title":"Baseline_model"},{"location":"modules/#pywedge_interactive-hyperparameter-tuning","text":"Introducing interactive hyperparameter tuning classes, Pywedge_HP, which has following two methods, HP_Tune_Classification HP_Tune_Regression Instantiate the Pywedge_HP class & call the HP_Tune_Classification method from Pywedge_HP class, pph = pw.Pywedge_HP(train, test, c, y, tracking=False) pph.HP_Tune_Classification() Args: train = train dataframe test = test dataframe c = any redundant column to be removed (like ID column etc., at present supports a single column removal, subsequent version will provision multiple column removal requirements) y = target column name as a string tracking = True/False(Default) #to enable mlflow hyperpameter tracking For classification - HP_Tune_Classification() For Regression - HP_Tune_Regression() As seen in the above GIF, user can interactively enter hyperparameter values, without worrying about tracking the same, as the integreted MLFlow automatically takes care of tracking hyperparameter values. To invoke mlflow tracking user interface, follow the below steps, 1) open command prompt 2) change directory to the location of the Jupyter Notebook file, for eg., if Jupyter notebook in a folder named pywedge in Documents folder, cd documents\\pywedge 3) enter the following command from the same folder as of the Jupyter Notebook file, mlflow ui 4) which trigers the mlflow ui & typically mlflow starts in the local host 5000. Please find the below pic for reference,","title":"Pywedge_Interactive Hyperparameter Tuning"}]}